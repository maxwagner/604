a=seq(1:n)
#################################################################
#######################Make it Pretty############################
mydata=data.frame(cbind(a,ia,ac,st,sb,wt,se,it))
plot(wt~ac, main="Queue Time by Hour", col="red", xlab="Hour",
ylab="Wait Time", type="l")
setwd("C:/Users/Lawrence/Google Drive/Courses & Syllabi/CUNY/IS604")
write.csv(mydata, "output.csv")
#################################################################
########################Initial Parameters#######################
set.seed(1234)
n=24  #should be 12 by the problem...
#################################################################
##################Set Up Interarrival Times######################
ia=rep(0,n) #initialize array for interarrival time (pmf)
s=c(rep(0,230),rep(60,370),rep(120,280),rep(180,120)) #pmf
ia[1]=0
ia[2]=0
ia[3:n]=sample(s,n-3+1,replace=T)
#################################################################
#######################Calculate Arrival Time####################
ac=rep(0,n) #initialize array for arrival time (arrival clock)
ac[1:2]=0
for (i in 3:n){ac[i]=ac[i-1]+ia[i]}
#################################################################
#######################Calculate Service Time####################
st=rnorm(n,50,8) #normal distrribution
sb=rep(0,n)  #time service begins
se=rep(0,n)  #time service ends
sb[1]=0
sb[2]=25
se[1]=25
se[2]=75
for (i in 3:n){sb[i]=max(sb[i-1]+st[i-1], ac[i])}
se[3:n]=sb[3:n]+st[3:n]
#################################################################
#######################Calculate OtherTimes######################
wt=se-ac  #wait time
it=rep(0,n)
it[1]=0
for (i in 2:n){it[i]=max(0,ac[i]-se[i-1])}
a=seq(1:n)
#################################################################
#######################Make it Pretty############################
mydata=data.frame(cbind(a,ia,ac,st,sb,wt,se,it))
plot(wt~ac, main="Queue Time by Hour", col="red", xlab="Hour",
ylab="Wait Time", type="l")
write.csv(mydata, "output.csv")
#################################################################
mydata=data.frame(cbind(a,ia,ac,st,sb,wt,se,it))
plot(wt~ac, main="Queue Time by Hour", col="red", xlab="Hour",
ylab="Wait Time", type="l")
avg(wt)
mean(wt)
mean(se-sb)
max(wt)
nc <- .35(8) + .30(10) + .25(12) + .10(14)
nc <- .35 * 8 + .30 * 10 + .25 * 12 + .10 * 14
nc <- .35 * 8 + .30 * 10 + .25 * 12 + .10 * 14
do <- .4 * 1 + .3 * 2 + .2 * 3 + .1 * 4
tot <- nc * do;tot
rand() % 100
rnorm(5, 100)
rnorm(5, 100, 100)
rnorm(5, 50, 50)
ia=rep(0,n)
set.seed(1234)
n=5
ia=rep(0,n)
s=c(rep(8,35),rep(10,30),rep(12,25),rep(14,10)) #pmf
ia[1:n]=sample(s,n,replace=T)
cust=rep(0,n)
s=c(rep(8,35),rep(10,30),rep(12,25),rep(14,10)) #pmf
cust[1:n]=sample(s,n,replace=T)
set.seed(1234)
n=5
cust=rep(0,n)
s=c(rep(8,35),rep(10,30),rep(12,25),rep(14,10)) #pmf
cust[1:n]=sample(s,n,replace=T)
s=c(rep(1,4),rep(2,3),rep(3,2),rep(4,1)) #pmf
doz[1:n]=sample(s,n,replace=T)
doz=rep(0,n)
s=c(rep(1,4),rep(2,3),rep(3,2),rep(4,1)) #pmf
doz[1:n]=sample(s,n,replace=T)
q <- cust*doz
doz=rep(0,n)
s=c(rep(1,4),rep(2,3),rep(3,2),rep(4,1)) #dozens
doz[1:n]=sample(s,n,replace=T)
doz=rep(0,n)
s=c(rep(1,4),rep(2,3),rep(3,2),rep(4,1)) #dozens
doz[1:n]=sample(s,n,replace=T)
doz=rep(0,n)
s=c(rep(1,4),rep(2,3),rep(3,2),rep(4,1)) #dozens
doz[1:n]=sample(s,n,replace=T)
q <- cust*doz #total dozens
cost <- 5.8
sell <- 8.4
profit <- 8.4-5.8
profitG <- 8.4/2 - 5.8
profit <- 8.4-5.8
profitG <- 8.4/2 - 5.8
data <- cbind(1:5,cust,doz,tot)
data <- cbind(1:5,cust,doz,q)
write.csv(mydata, "output2.csv")
write.csv(data, "output2.csv")
12*2.6
x <- rnorm(50, 100, 100)
x
x <- rnorm(50, 100, sqrt(100))
y <- rnorm(50, 300, sqrt(225))
z <- rnorm(50, 40, sqrt(64))
w <- (x + y) / z
x <- rnorm(50, 100, sqrt(100))
y <- rnorm(50, 300, sqrt(225))
z <- rnorm(50, 40, sqrt(64))
w <- (x + y) / z
hist(w, breaks = 3)
hist(w)
hist(w, breaks = c(3,6,9,12,15,18,21))
hist(w, breaks = seq(6:21,by=3))
hist(w, breaks = seq(6,21,by=3))
hist(w, breaks = seq(3,21,by=3))
rnorm(35,5,1.5)
View(data)
round(rnorm(35,5,1.5))
data <- cbind(1:25, round(rnorm(35,5,1.5)))
data <- cbind(1:25, round(rnorm(25,5,1.5)))
write.csv(data, "output.csv")
7/5
setwd("~/GitHub/605/assign")
```{r}
Gelimination <- function(matrix, vector) {
matrix <- cbind(matrix, vector)
if (matrix[1,1] == 0) {
if (matrix[3,1] != 0) {
third <- -1 * matrix[3,]
matrix[3,] <- matrix[1,]
matrix[1,] <- third
} else {
return ("Can't have a zero pivot here...")
}
}
matrix[1,] <- matrix[1,] / matrix[1, 1]
for (i in 2:3) {
for (j in i:3) {
matrix[j, ] <- matrix[j, ] - matrix[i - 1, ] * matrix[j, i - 1]
}
matrix[i, ] <- matrix[i, ] / matrix[i, i]
}
for (i in 3:2) {
for (j in i:2-1) {
matrix[j, ] <- matrix[j, ] - matrix[i, ] * matrix[j, i]
}
}
return(matrix[, 4])
}
matrix <- matrix(c(1,1,3,2,-1,5,-1,-2,4), nrow = 3, byrow = TRUE) # test case
vector <- c(1,2,6)
Gelimination(matrix, vector)
matrix <- matrix(c(0,0,3,2,-1,5,-1,-2,4), nrow = 3, byrow = TRUE) # 0 pivot test case
vector <- c(1,2,6)
Gelimination(matrix, vector)
Gelimination <- function(matrix, vector) {
matrix <- cbind(matrix, vector)
if (matrix[1,1] == 0) {
if (matrix[3,1] != 0) {
third <- -1 * matrix[3,]
matrix[3,] <- matrix[1,]
matrix[1,] <- third
} else {
return ("Can't have a zero pivot here...")
}
}
matrix[1,] <- matrix[1,] / matrix[1, 1]
for (i in 2:3) {
for (j in i:3) {
matrix[j, ] <- matrix[j, ] - matrix[i - 1, ] * matrix[j, i - 1]
}
matrix[i, ] <- matrix[i, ] / matrix[i, i]
}
for (i in 3:2) {
for (j in i:2-1) {
matrix[j, ] <- matrix[j, ] - matrix[i, ] * matrix[j, i]
}
}
return(matrix)
}
matrix <- matrix(c(1,1,3,2,-1,5,-1,-2,4), nrow = 3, byrow = TRUE) # test case
vector <- c(1,2,6)
Gelimination(matrix, vector)
matrix <- matrix(c(0,0,3,2,-1,5,-1,-2,4), nrow = 3, byrow = TRUE) # 0 pivot test case
vector <- c(1,2,6)
Gelimination(matrix, vector)
matrix <- matrix(c(1,2,3,1,1,1,2,0,1),nrow=3), nrow = 3, byrow = TRUE) # test case
vector <- c(1,2,6)
Gelimination(matrix, vector)
matrix <- matrix(c(0,0,3,2,-1,5,-1,-2,4), nrow = 3, byrow = TRUE) # 0 pivot test case
matrix[0,0]
matrix[0]
matrix[0,]
matrix[0,1]
matrix[11]
matrix[1]
matrix[1,]
matrix[1,1]
x1 <- c(1:10)
y1 <- c(0,1,2,6,14,24,37,58,82,114)
#actual
x2 <- c(1:10)
y2 <- x2^3
y2 <- x2^2
k <- x1 / y1
k
k <- x1^3 / y1
k <- x1^3 / y1
x <- c(19,25,32,51)
y <- c(17,19,20,22)
k <- y1 / x^3
x1 <- c(1:10)
y1 <- c(0,1,2,6,14,24,37,58,82,114)
k <- y1 / x^3
x1 <- c(1:10)
y1 <- c(0,1,2,6,14,24,37,58,82,114)
k <- y1 / x1^3
k <- y/x^3
x1 <- c(1:10)
y1 <- c(0,1,2,6,14,24,37,58,82,114)
k <- y1 / x1^3
k
x <- c(17,19,20,23,25,28,32,38,39,41)
y <- c(19,25,32,57,71,113,252,259,294)
k <- y/x
k
x <- c(17,19,20,23,25,28,32,38,39,41)
y <- c(19,25,32,57,71,113,123,252,259,294)
k <- y/x
k
17/2
8.5^2
*3
19/2
9.5^2
plot(x^3,y)
abline(y ~ x^3)
k <- y/x^3
avgK <- mean(k)
n=100
calls=rep(0,n)
s=c(rep(15,14),rep(20,22),rep(25,43),rep(30,17),rep(35,4)) #customers
calls[1:n]=sample(s,n,replace=T)
setwd("~/GitHub/604/hw")
service=rep(0,n)
s=c(rep(5,12),rep(15,35),rep(25,43),rep(35,6),rep(45,4))
service[1:n]=sample(s,n,replace=T)
set.seed(1234)
n=12  #should be 12 by the problem...
#################################################################
##################Set Up Interarrival Times######################
ia=rep(0,n) #initialize array for interarrival time (pmf)
s=c(rep(0,230),rep(60,370),rep(120,280),rep(180,120)) #pmf
ia[1]=0
ia[2]=0
ia[3:n]=sample(s,n-3+1,replace=T)
#################################################################
#######################Calculate Arrival Time####################
ac=rep(0,n) #initialize array for arrival time (arrival clock)
ac[1:2]=0
for (i in 3:n){ac[i]=ac[i-1]+ia[i]}
#################################################################
#######################Calculate Service Time####################
st=rnorm(n,50,8) #normal distrribution
sb=rep(0,n)  #time service begins
se=rep(0,n)  #time service ends
sb[1]=0
sb[2]=25
se[1]=25
se[2]=75
for (i in 3:n){sb[i]=max(sb[i-1]+st[i-1], ac[i])}
se[3:n]=sb[3:n]+st[3:n]
#################################################################
#######################Calculate OtherTimes######################
wt=se-ac  #wait time
it=rep(0,n)
it[1]=0
for (i in 2:n){it[i]=max(0,ac[i]-se[i-1])}
a=seq(1:n)
#################################################################
#######################Make it Pretty############################
mydata=data.frame(cbind(a,ia,ac,st,sb,wt,se,it))
plot(wt~ac, main="Queue Time by Hour", col="red", xlab="Hour",
ylab="Wait Time", type="l")
write.csv(mydata, "output.csv")
n=100
calls=rep(0,n)
s=c(rep(15,14),rep(20,22),rep(25,43),rep(30,17),rep(35,4))
calls[1:n]=sample(s,n,replace=T)
service=rep(0,n)
s=c(rep(5,12),rep(15,35),rep(25,43),rep(35,6),rep(45,4))
service[1:n]=sample(s,n,replace=T)
data <- cbind(calls, service)
write.csv(data, "output.csv")
n=100
calls=rep(0,n)
s=c(rep(15,14),rep(20,22),rep(25,43),rep(30,17),rep(35,4))
calls[1:n]=sample(s,n,replace=T)
service=rep(0,n)
s=c(rep(5,12),rep(15,35),rep(25,43),rep(35,6),rep(45,4))
service[1:n]=sample(s,n,replace=T)
data <- cbind(calls, service)
write.csv(data, "output.csv")
########################Initial Parameters#######################
set.seed(1234)
n=12  #should be 12 by the problem...
#################################################################
##################Set Up Interarrival Times######################
ia=rep(0,n) #initialize array for interarrival time (pmf)
s=c(rep(0,230),rep(60,370),rep(120,280),rep(180,120)) #pmf
ia[1]=0
ia[2]=0
ia[3:n]=sample(s,n-3+1,replace=T)
#################################################################
#######################Calculate Arrival Time####################
ac=rep(0,n) #initialize array for arrival time (arrival clock)
ac[1:2]=0
for (i in 3:n){ac[i]=ac[i-1]+ia[i]}
#################################################################
#######################Calculate Service Time####################
st=rnorm(n,50,8) #normal distrribution
sb=rep(0,n)  #time service begins
se=rep(0,n)  #time service ends
sb[1]=0
sb[2]=25
se[1]=25
se[2]=75
for (i in 3:n){sb[i]=max(sb[i-1]+st[i-1], ac[i])}
se[3:n]=sb[3:n]+st[3:n]
#################################################################
#######################Calculate OtherTimes######################
wt=se-ac  #wait time
it=rep(0,n)
it[1]=0
for (i in 2:n){it[i]=max(0,ac[i]-se[i-1])}
a=seq(1:n)
#################################################################
#######################Make it Pretty############################
mydata=data.frame(cbind(a,ia,ac,st,sb,wt,se,it))
plot(wt~ac, main="Queue Time by Hour", col="red", xlab="Hour",
ylab="Wait Time", type="l")
write.csv(mydata, "output.csv")
#################################################################
ia=rep(0,n) #initialize array for interarrival time (pmf)
s=c(rep(15,14),rep(20,22),rep(25,43),rep(30,17),rep(35,4))
ia[1]=0
ia[2:n]=sample(s,n-1,replace=T)
n=10  #should be 12 by the problem...
#################################################################
##################Set Up Interarrival Times######################
ia=rep(0,n) #initialize array for interarrival time (pmf)
s=c(rep(15,14),rep(20,22),rep(25,43),rep(30,17),rep(35,4))
ia[1]=0
ia[2:n]=sample(s,n-1,replace=T)
matrix <- matrix(c(1,2,3,1,1,1,2,0,1), nrow = 3, byrow = TRUE) # test case
matrix
matrix[1,] <- matrix[1,] / matrix[1, 1]
for (i in 2:3) {
for (j in i:3) {
matrix[j, ] <- matrix[j, ] - matrix[i - 1, ] * matrix[j, i - 1]
}
matrix[i, ] <- matrix[i, ] / matrix[i, i]
}
matrix
for (i in 3:2) {
for (j in i:2-1) {
matrix[j, ] <- matrix[j, ] - matrix[i, ] * matrix[j, i]
}
}
return(matrix)
}
matrix
matrix <- matrix(c(1,2,3,1,1,1,2,0,1), nrow = 3, byrow = TRUE) # test case
upperTriangle <- function(matrix, n) {
matrix[1,] <- matrix[1,] / matrix[1, 1]
for (i in 2:n) {
for (j in i:n) {
matrix[j, ] <- matrix[j, ] - matrix[i - 1, ] * matrix[j, i - 1]
}
matrix[i, ] <- matrix[i, ] / matrix[i, i]
}
}
uppertriangle(matrix,3)
upperTriangle(matrix,3)
upperTriangle <- function(matrix, n) {
matrix[1,] <- matrix[1,] / matrix[1, 1]
for (i in 2:n) {
for (j in i:n) {
matrix[j, ] <- matrix[j, ] - matrix[i - 1, ] * matrix[j, i - 1]
}
matrix[i, ] <- matrix[i, ] / matrix[i, i]
}
return(matrix)
}
upperTriangle(matrix,3)
matrix <- matrix(c(1,2,3,1,1,1,2,0,1), nrow = 3, byrow = TRUE) # test case
matrix
matrix <- matrix(c(1,2,3,2,-4,6,3,-9,-3), nrow = 3, byrow = TRUE) # test case
upperTriangle(matrix,3)
upper.tri(matrix)
install.packages("matrix")
install.packages("Matrix")
library(Matrix)
library(Matrix)
install.packages("Matrix")
install.packages("Matrix")
install.packages("Matrix")
install.packages("Matrix")
library(Matrix)
lu(matrix)
upperTriangle(matrix,3)
matrix <- matrix(c(3,2,1,6,-4,2,-3,-9,3), nrow = 3, byrow = TRUE) # test case
upperTriangle(matrix,3)
matrix
final <- matrix(c(1,0,0,0,1,0,0,0,1), nrow = 3, byrow = TRUE) # test case
final
matrix <- matrix(c(1,2,3,2,-4,6,3,-9,-3), nrow = 3, byrow = TRUE) # test case
matrix
matrix[1,2]
matrix[2,3]
matrix[2,1]
-matrix[2,1]
final <- matrix(c(1,0,0,-matrix[2,1],1,0,0,0,1), nrow = 3, byrow = TRUE) # test case
final
final * matrix
final %*% matrix
matrix <- matrix(c(1,2,3,2,-4,6,3,-9,-3), nrow = 3, byrow = TRUE) # test case
final <- matrix(c(1,0,0,-matrix[2,1],1,0,0,0,1), nrow = 3, byrow = TRUE)
matrix <- final %*% matrix
matrix
inv2 <- matrix(c(1,0,0,-matrix[3,1],1,0,0,0,1), nrow = 3, byrow = TRUE)
matrix <- inv2 %*% matrix
matrix
matrix <- matrix(c(1,2,3,2,-4,6,3,-9,-3), nrow = 3, byrow = TRUE) # test case
inv1 <- matrix(c(1,0,0,-matrix[2,1],1,0,0,0,1), nrow = 3, byrow = TRUE)
matrix <- inv1 %*% matrix
inv2 <- matrix(c(1,0,0,0,1,0,-matrix[3,1],0,1), nrow = 3, byrow = TRUE)
matrix <- inv2 %*% matrix
matrix
matrix <- matrix(c(1,2,3,2,-4,6,3,-9,-3), nrow = 3, byrow = TRUE) # test case
upperTriangle(matrix,3)
matrix <- matrix(c(1,2,3,1,1,1,2,0,1), nrow = 3, byrow = TRUE) # test case
upperTriangle(matrix,3)
matrix <- matrix(c(1,2,3,2,-4,6,3,-9,-3), nrow = 3) # test case
upperTriangle(matrix,3)
matrix <- matrix(c(1,2,3,2,-4,6,3,-9,-3), nrow = 3) # test case
matrix
matrix <- matrix(c(1,2,3,1,1,1,2,0,1), nrow = 3, byrow = TRUE) # test case
matrix <- matrix(c(1,2,3,1,1,1,2,0,1), nrow = 3, byrow = TRUE) # test case
matrix
matrix <- matrix(c(1,2,3,1,1,1,2,0,1), nrow = 3) # test case
matrix
upperTriangle(matrix,3)
matrix <- matrix(c(1,2,3,1,1,1,2,0,1), nrow = 3) # test case
matrix <- matrix(c(1,2,3,1,1,1,2,0,1), nrow = 3);matrix # test case
inv1 <- matrix(c(1,0,0,-matrix[2,1],1,0,0,0,1), nrow = 3, byrow = TRUE)
matrix <- inv1 %*% matrix;matrix
inv2 <- matrix(c(1,0,0,0,1,0,-matrix[3,1],0,1), nrow = 3, byrow = TRUE)
matrix <- inv2 %*% matrix;matrix
matrix <- matrix(c(1,2,3,1,1,1,2,0,1), nrow = 3);matrix # test case
inv1 <- matrix(c(1,0,0,-matrix[2,1],1,0,0,0,1), nrow = 3, byrow = TRUE)
matrix <- inv1 %*% matrix;matrix
-matrix[3,1]
inv2 <- matrix(c(1,0,0,0,1,0,-matrix[3,1],0,1), nrow = 3, byrow = TRUE)
matrix <- inv2 %*% matrix;matrix
-matrix[2,2]
inv3 <- matrix(c(1,0,0,0,-matrix[2,2],0,0,0,1), nrow = 3, byrow = TRUE)
matrix <- inv3 %*% matrix
matrix
matrix <- matrix(c(1,2,3,1,1,1,2,0,1), nrow = 3);matrix # test case
inv1 <- matrix(c(1,0,0,-matrix[2,1],1,0,0,0,1), nrow = 3, byrow = TRUE)
matrix <- inv1 %*% matrix;matrix
inv2 <- matrix(c(1,0,0,0,1,0,-matrix[3,1],0,1), nrow = 3, byrow = TRUE)
matrix <- inv2 %*% matrix;matrix
inv3 <- matrix(c(1,0,0,0,-matrix[2,2],0,0,matrix[3,2],1), nrow = 3, byrow = TRUE)
matrix <- inv3 %*% matrix;matrix
matrix <- matrix(c(1,2,3,1,1,1,2,0,1), nrow = 3);matrix # test case
inv1 <- matrix(c(1,0,0,-u[2,1],1,0,0,0,1), nrow = 3, byrow = TRUE)
u <- inv1 %*% u;u
u <- matrix
inv1 <- matrix(c(1,0,0,-u[2,1],1,0,0,0,1), nrow = 3, byrow = TRUE)
u <- inv1 %*% u;u
inv2 <- matrix(c(1,0,0,0,1,0,-u[3,1],0,1), nrow = 3, byrow = TRUE)
u <- inv2 %*% u;u
inv3 <- matrix(c(1,0,0,0,-u[2,2],0,0,u[3,2],1), nrow = 3, byrow = TRUE)
u <- inv3 %*% u;u
l <- solve(inv1) %*% solve(inv2) %*% solve(inv3)
l
l,u
c(l,u)
l
list(l,u)
matrix <- matrix(c(1,2,3,1,1,1,2,0,1), nrow = 3);matrix # test case
LUDecomp <- function(matrix) {
u <- matrix
inv1 <- matrix(c(1,0,0,-u[2,1],1,0,0,0,1), nrow = 3, byrow = TRUE)
u <- inv1 %*% u;u
inv2 <- matrix(c(1,0,0,0,1,0,-u[3,1],0,1), nrow = 3, byrow = TRUE)
u <- inv2 %*% u;u
inv3 <- matrix(c(1,0,0,0,-u[2,2],0,0,u[3,2],1), nrow = 3, byrow = TRUE)
u <- inv3 %*% u;u
l <- solve(inv1) %*% solve(inv2) %*% solve(inv3)
return(list(l,u))
}
LUDecomp(matrix)
