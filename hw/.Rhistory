setwd("~/GitHub/605/assign")
A <- matrix(c(-1,1,0,1,3,-2,5,0,1), nnrow = 3)
A <- matrix(c(-1,1,0,1,3,-2,5,0,1), nrow = 3)
A
X <- A %*% t(A)
X
X <- A %*% t(A)
Y <- t(A) %*% A
Y
X <- A %*% t(A);X
Y <- t(A) %*% A;Y
xeigen <- eigen(X)
xeigen
yeigen <- eigen(Y);yiegen
yeigen <- eigen(Y);yiegen
yeigen <- eigen(Y);
yeigen <- eigen(Y);yiegen
yeigen <- eigen(Y);yeigen
A <- matrix(c(-1,1,0,1,3,-2,5,0,1), nrow = 3);A
X <- A %*% t(A);X
Y <- t(A) %*% A;Y
asvd <- svd(A)
asvd
dsvd <- svd(A)$d
dsvd
A <- matrix(c(-1,1,0,1,3,-2,5,0,1), nrow = 3);A
X <- A %*% t(A);X
Y <- t(A) %*% A;Y
x.eigen <- eigen(X);xeigen
y.eigen <- eigen(Y);yeigen
a.svd <- svd(A)
a.svd$d
a.svd$u
a.svd$v
x.eigen$vectors
a.svd$u
x.eigen$vectors
a.svd$u
a.svd$v
y.eigen$vectors
a.svd$v
a.svd$d^2
x.eigen$values
x.eigen$values
y.eigen$values
a.svd$d ^ 2
B <- matrix(,nrow = dim(A), ncol = dim(A))
B
B <- matrix(data = NA,nrow = dim(A), ncol = dim(A))
B <- matrix(data = NA,nrow = dim(A), ncol = dim(A))
B
dim(A)
length(A)
dim(A)$1
dim(A)$
dim(A)
dim(A)[1]
B[i,j] <- -1^(i+j) * det(A[-i,-j])
myinverse <- function(A) {
if (det(A) != 0) { #checking for 0 determinant
B <- matrix(data = NA,nrow = dim(A)[1], ncol = dim(A)[2])
for (i in 1:dim(A)[1]) {
for (j in 1:dim(A)[2]) {
B[i,j] <- -1^(i+j) * det(A[-i,-j])
}
}
return(t(B) / det(A))
}
}
myinverse <- function(A) {
# Takes matrix A, and returns the inverse(B).
if (det(A) != 0) { #checking for 0 determinant
B <- matrix(data = NA,nrow = dim(A)[1], ncol = dim(A)[2])
for (i in 1:dim(A)[1]) {
for (j in 1:dim(A)[2]) {
B[i,j] <- -1^(i+j) * det(A[-i,-j])
}
}
return(t(B) / det(A))
}
}
View(myinverse)
View(myinverse)
B <- myinverse(A)
A %*% B
A <- matrix(c(-1,1,0,1,3,-2,5,0,1), nrow = 3);A
X <- A %*% t(A);X
Y <- t(A) %*% A;Y
B
A %*% B
round(A %*% B)
A
B
setwd("~/GitHub/609/hw")
y.monte <- runif(1000, 0, 1)
x.monte <- runif(1000, 0, 1)
monte <- x.monte^2 + y.monte^2
length(monte[monte]) / length(monte)
prop.month <- length(monte[monte]) / length(monte)
length(monte[monte])
monte[monte]
monte
y.monte <- runif(1000, 0, 1)
x.monte <- runif(1000, 0, 1)
monte <- x.monte^2 + y.monte^2
area.monte <- (length(monte[monte]) / length(monte))
area.monte <- (length(monte[monte]) / length(monte)) * 4
y.monte <- runif(100000, 0, 1)
x.monte <- runif(100000, 0, 1)
monte <- x.monte^2 + y.monte^2
area.monte <- (length(monte[monte]) / length(monte)) * 4
y.monte <- runif(100000, 0, 1)
x.monte <- runif(100000, 0, 1)
monte <- x.monte^2 + y.monte^2 <= 1
area.monte <- (length(monte[monte]) / length(monte)) * 4
(length(monte[monte]) / length(monte)) * 4
area.monte
set.seed(1009)
x0 <- 1009^2
x1 <- 180^2
x2 <- 324^2
x0 <- 1009^2
x1 <- 180^2
x2 <- 324^2
x3 <- 1049^2
x4 <- 1004^2
x5 <- 80^2
x6 <- 64^2
x7 <- 40^2
x8 <- 16^2
x9 <- 2^2
cbind <- c(x0,x1,x2,x3,x4,x5,x6,x7,x8,x9)
c(x0,x1,x2,x3,x4,x5,x6,x7,x8,x9)
x0,x1,x2,x3,x4,x5,x6,x7,x8,x9
c(x0,x1,x2,x3,x4,x5,x6,x7,x8,x9)
c(1009,180,324,1049,1004,80,64,40,16,2)
x0 <- 653217^2
x0 <- 3043^2
x1 <- 2598^2
x0 <- 3043^2
x1 <- 2598^2
x2 <- 7496^2
x3 <- 1900^2
x4 <- 6100^2
x5 <- 2100^2
x6 <- 4100^2
x7 <- 8100^2
x8 <- 6100^2
x9 <- 2100^2
x10 <- 4100^2
x10 <- 4100^2
x10 <- 4100^2
x0 <- 3043^2
x1 <- 2598^2
x2 <- 7496^2
x3 <- 1900^2
x4 <- 6100^2
x5 <- 2100^2
x6 <- 4100^2
x7 <- 8100^2
x8 <- 6100^2
x9 <- 2100^2
x10 <- 4100^2
x11 <- 8100^2
x12 <- 6100^2
x13 <- 2100^2
x14 <- 4100^2
odds <- c(1/7,1/5,1/9,1/12,1/4,1/35,1/15,1/4)
sum(odds)
odds <- odds / sum(odds)
odds
odds <- c(1/7,1/5,1/9,1/12,1/4,1/35,1/15,1/4)
odds
odds <- odds / sum(odds)
odds
euler <- odds[1]
leapin <- odds[1:2]
leapin <- sum(odds[1:2])
pumped <- sum(odds[1:5])
newton <- sum(odds[1:3])
count <- sum(odds[1:4])
pumped <- sum(odds[1:5])
loping <- sum(odds[1:6])
steamin <- sum(odds[1:7])
dancin <- sum(odds[1:8])
cumodds <- c(euler,leapin,newton,count,pumped,loping,steamin,dancin)
cumodds
races <- runif(1000, 0, 1)
winners <- c(races, sum(i < cumodds))
for (i in races) {
winners <- c(races, sum(i < cumodds))
}
winners
races <- runif(1000, 0, 1)
winners <- c()
for (i in races) {
winners <- c(races, sum(i < cumodds))
}
for (i in races-1) {
winners <- c(races, sum(i < cumodds))
}
winners <- c()
for (i in races-1) {
winners <- c(races, sum(i < cumodds))
}
winners
hist(winners)
winners[-1001]
winners[1001] <- NULL
winners[1001]
winners <- winners[1:1000]
hist(winners)
hist(winners, breaks=8)
hist(winners, breaks=8)
summary(winners)
winners <- round(winners, digits = 2)
winners
cumodds
winners <- c()
winners <- c(winners, sum(i < cumodds))
winners
i < 1
i <- 1
winners <- c(winners, sum(i < cumodds))
winners <- c()
winners <- c(winners, sum(i < cumodds))
winners
winners <- c(winners, sum(2 < cumodds))
races
winners <- c(winners, sum(.1 < cumodds))
winners <- c(winners, sum(.2 < cumodds))
winners <- c(winners, sum(.5 < cumodds))
winners <- c(winners, sum(.8 < cumodds))
races <- runif(1000, 0, 1)
winners <- c()
for (i in races) {
winners <- c(races, sum(i < cumodds))
}
races <- runif(10000, 0, 1)
winners <- c()
for (i in races) {
winners <- c(races, sum(i < cumodds))
}
winners <- c(races, sum(.78888888 < cumodds))
winners
races <- runif(999, 0, 1)
winners <- c()
euler <- odds[1]
odds <- c(1/7,1/5,1/9,1/12,1/4,1/35,1/15,1/4)
sum(odds)
odds <- odds / sum(odds)
euler <- odds[1]
leapin <- sum(odds[1:2])
newton <- sum(odds[1:3])
count <- sum(odds[1:4])
pumped <- sum(odds[1:5])
loping <- sum(odds[1:6])
steamin <- sum(odds[1:7])
dancin <- sum(odds[1:8])
cumodds <- c(euler,leapin,newton,count,pumped,loping,steamin,dancin)
races <- runif(999, 0, 1)
winners <- c()
for (i in races) {
winners <- c(races, sum(i < cumodds))
}
winners <- winners[1:1000]
winners <- round(winners, digits = 2)
races <- runif(1000, 0, 1)
winners <- c()
races
winners <- c()
for (i in races) {
winners <- c(races, sum(i < cumodds))
}
for (i in races) {
winners <- c(races, sum(i < cumodds))
}
winners <- c()
for (i in races) {
winners <- c(races, sum(i < cumodds))
}
rnlist <- runif(10000,0,1)
horselist <- c()
for(i in rnlist){
horselist <- c(horselist,sum(i < cumodds))
}
races <- runif(1000, 0, 1)
winners <- c()
races <- runif(1000, 0, 1)
winners <- c()
for (i in races) {
winners <- c(winners, sum(i < cumodds))
}
winners <- winners[1:1000]
winners <- round(winners, digits = 2)
hist(winners)
hist(winners, breaks=8)
races <- runif(1000, 0, 1)
winners <- c()
for (i in races) {
winners <- c(winners, sum(i < cumodds))
}
winners <- winners[1:1000]
winners <- round(winners, digits = 2)
hist(winners, breaks=8)
lag2 <- 10/100
lag2 <- 10/100
lag3 <- lag2 + (25/100)
lag4 <- lag3 + 30/100
lag5 <- lag4 + 20/100
lag2 <- 10/100
lag3 <- lag2 + 25/100
lag4 <- lag3 + 30/100
lag5 <- lag4 + 20/100
lag6 <- lag5 + 13/100
lag7 <- lag6 + 2/100
cumodds <- c(lag2,lag3,lag4,lag5,lag6,lag7)
trials <- runif(1000, 0, 1)
lags <- c()
for (i in trials) {
lags <- c(lags, sum(i < cumodds))
}
hist(lags, breaks=6)
hist(lags, breaks=7)
hist(lags, breaks=7)
hist(lags, breaks=6)
hist(lags, breaks=5)
hist(lags, breaks=6)
setwd("~/GitHub/604/hw")
library(ggplot2)
install.packages("ggplot2")
library(ggplot2)
ggplot(cbind(x,fx)) + geom_line()
x <- seq(0, 1, by = 0.05)
fx <- (3/2) - x
ggplot(cbind(x,fx)) + geom_line()
x
ggplot(data.frame(cbind(x,fx))) + geom_line()
ggplot(x = x, y = fx) + geom_line()
x.graph <- cbind(x,fx)
x <- seq(0, 1, by = 0.05)
fx <- (3/2) - x
x.graph
ggplot(data = x.graph) + geom_line()
x.graph <- data.frame(cbind(x,fx))
ggplot(data = x.graph) + geom_line()
ggplot(data = x.graph, aes(x = x, fx=fx)) + geom_line()
ggplot(data = x.graph, aes(x = x, fx=fx)) + geom_line()
ggplot(data = x.graph, aes(x = x, y=fx)) + geom_line()
x.graph <- data.frame(cbind(x,fx))
ggplot(data = x.graph, aes(x = x, y=fx)) + geom_line()
y <- seq(1, 2, by = 0.05)
fy <- y - (1/2)
y.graph <- data.frame(cbind(y,fy))
ggplot(data = y.graph, aes(x = y, y=fy)) + geom_line()
obs <- c(7.3,6.1,3.8,8.4,6.9,7.1,5.3,8.2,4.9,5.8)
obs <- c(7.3,6.1,3.8,8.4,6.9,7.1,5.3,8.2,4.9,5.8)
x <- mean(obs)
x
s2 <- sum(obs - x)
obs - x
s2 <- sum((obs - x)^2)
s2 <- sum((obs - x)^2)/10
obs
var(obs)
s2b <- (obs - x)^2 / length(obs)
s2b <- sum((obs - x)^2 / length(obs))
obs <- c(7.3,6.1,3.8,8.4,6.9,7.1,5.3,8.2,4.9,5.8)
mean <- mean(obs);mean
s2 <- var(obs);s2 #population var
s2b <- sum((obs - x)^2 / length(obs)); s2b #sample var
s2b <- sum((obs - x)^2 / length(obs)); s2b #sample var
s2b <- sum((obs - mean)^2 / length(obs)); s2b #sample var
ci <- 2.16 * (sqrt(s2b) / sqrt(length(obs)))
x <- exp(-100) - exp(-110);x
